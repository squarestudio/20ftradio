<html>
<head>
    {squarespace-headers}
    <squarespace:script src="MobileCastController.js" combo="true"/>
    <squarespace:script src="MobileEventsController.js" combo="true"/>
    <squarespace:script src="general.js" combo="true"/>
    <squarespace:script src="mobile-app.js" combo="true"/>
</head>
<body class="cordova-app page-{collection.typeLabel} {squarespace.page-classes}" id="{squarespace.page-id}">
<div id="navigator">
    {.section website}
    <header id="topBar" class="sqs-announcement-bar-dropzone">
        <div class="site-player-block">
            <div class="site-player paused not-init">
                <div class="site-player-wrapper">
                    <div class="site-player-controls">
                        <a id="playButton">
                            <i class="icono-"></i>
                        </a>
                        <a id="volumeButton">
                            <i class="icono-volumeHigh"></i>
                        </a>
                        <input id="volControl" value="100" class="volume-control" type="range" min="0" max="100"
                               step="1"></input>
                    </div>
                    <div class="track-name"><span>Now playing: </span></div>
                </div>
            </div>
        </div>
        <div class="nav-container">
            <div id="mobileNav">
                <div class="wrapper">
                    <squarespace:navigation navigationId="app-links" template="mobile-navigation"/>
                </div>
            </div>
            <squarespace:navigation navigationId="pages" template="navigation"/>
            <div class="header-block">
                <squarespace:block-field id="headerBlock" class="header-block-content" columns="12"
                                         label="Header Content" annotation-alignment="bottom"/>
            </div>
            <a href="#" class="video-toggle">Video</a>
        </div>
    </header>
    {.end}
    <div class="sqs-cart-dropzone"></div>
    <squarespace:query collection="cast" limit="2">
        {.if items}
        {.section items.0}
        <div class="castWrapper">
            <div id="castDiv" data-title="{title}"
                 class="cast-container {.if customContent.showLive}show-live{.end} paused content-fit"
                 sqs-controller="Template.Controllers.MobileCastController"
                 data-url="{oembed.url}"
                 data-facebook-url="{customContent.facebookUrl}"
                 data-soundcloud-url="{customContent.soundCloudUrl}"
                 data-shoutcast-url="{customContent.shoutcastUrl}">
                <div class="mobile-image">
                    <div class="line"></div>
                    <div class="mobile-trigger-wrapper">
                        <a href="#" class="mobile-trigger"></a>
                    </div>
                </div>
                <div class="live-indicator">‚óè Live</div>
            </div>
        </div>
        {.end}
        {.end}
    </squarespace:query>
    <section id="container">
        <div class="content-loader">
            <div class="fountainG fountainG_1"></div>
            <div class="fountainG fountainG_2"></div>
            <div class="fountainG fountainG_3"></div>
            <div class="fountainG fountainG_4"></div>
            <div class="fountainG fountainG_5"></div>
        </div>
        <div id="container-content" class="clear" data-content-field="main-content" role="main">
            <div id="controller" class="controller" {.equal? collection.typeName
            "wall-index"}sqs-controller="Template.Controllers.WallController"{.or}{.equal? collection.urlId
            "mobile-app"}sqs-controller="Template.Controllers.MobileEventsController"{.end}{.end}>
            {.equal? collection.urlId "mobile-app"}
            <div id="mobileEvents">
                <div class="tabs clear">
                    <a href="#mobile-events-upcoming" class="tab-1 active">Schedule</a>
                    <a href="#mobile-events-past" class="tab-2">Shows</a>
                    <div class="tab-border"></div>
                </div>
                <div class="content-loader" style="display:block;">
                    <div class="fountainG fountainG_1"></div>
                    <div class="fountainG fountainG_2"></div>
                    <div class="fountainG fountainG_3"></div>
                    <div class="fountainG fountainG_4"></div>
                    <div class="fountainG fountainG_5"></div>
                </div>
                <div class="mobileEvents-wrapper">
                    <div class="mobileEvents-container">
                        <ul id="mobile-events-upcoming" class="mobileEvents mobileEvents-Upcoming active"
                            style="opacity: 0">
                            <p class="no-shows-message">No Upcoming Shows</p>
                        </ul>
                        <ul id="mobile-events-past" class="mobileEvents mobileEvents-Past"></ul>
                    </div>
                </div>
            </div>
            {.or}
            {squarespace.main-content}
            {.end}
        </div>
    </section>
    {.section website}
    <footer id="bottomBar">
        <div id="mixcloudInsert"></div>
        <div class="new-footer-content">
            <a href="#" class="menu-button footer-button">Menu</a>
            <a href="#" class="mode-button footer-button">Mode</a>
            <a href="#" class="follow-button footer-button">Follow</a>
        </div>
        <div class="footer-h-content">
            <!--<squarespace:block-field id="mobileFooterBlock" class="footer-block" columns="12" label="Mobile Footer Content"/>-->
        </div>
    </footer>
    {.end}
</div>
<div id="bottomContainer"></div>
<canvas id="canvas" width="1000" height="325" style="display: block;"></canvas>
<div id="example">
    <audio id="audio" class="hideIfNoApi" controls="controls"
           src="http://eu2.radioboss.fm:8188/20ftRadio" crossorigin="anonymous"></audio>
</div>
<script>
    var audio = document.getElementById("audio");
    var context = new AudioContext();
    var src = context.createMediaElementSource(audio);
    var analyser = context.createAnalyser();

    var canvas = document.getElementById("canvas");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    var ctx = canvas.getContext("2d");

    src.connect(analyser);
    analyser.connect(context.destination);

    analyser.fftSize = 256;

    var bufferLength = analyser.frequencyBinCount;
    console.log(bufferLength);

    var dataArray = new Uint8Array(bufferLength);

    var WIDTH = canvas.width;
    var HEIGHT = canvas.height;

    var barWidth = (WIDTH / bufferLength) * 2.5;
    var barHeight;
    var x = 0;

    function renderFrame() {
        requestAnimationFrame(renderFrame);

        x = 0;

        analyser.getByteFrequencyData(dataArray);

        ctx.fillStyle = "#fff";
        ctx.fillRect(0, 0, WIDTH, HEIGHT);

        for (var i = 0; i < bufferLength; i++) {
            barHeight = dataArray[i];

            var r = barHeight + (25 * (i/bufferLength));
            var g = 250 * (i/bufferLength);
            var b = 50;

            ctx.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
            ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);

            x += barWidth + 1;
        }
    }
    renderFrame();
</script>
<script type="text/javascript">

    // create the audio context (chrome only for now)
    // create the audio context (chrome only for now)
    if (! window.AudioContext) {
        if (! window.webkitAudioContext) {
            alert('no audiocontext found');
        }
        window.AudioContext = window.webkitAudioContext;
    }
    var context = new AudioContext();
    var audioBuffer;
    var sourceNode;
    var analyser;
    var javascriptNode;

    // get the context from the canvas to draw on
    var ctx = $("#canvas").get()[0].getContext("2d");

    // create a gradient for the fill. Note the strange
    // offset, since the gradient is calculated based on
    // the canvas, not the specific element we draw
    var gradient = ctx.createLinearGradient(0,0,0,300);
    gradient.addColorStop(1,'#000000');
    gradient.addColorStop(0.75,'#ff0000');
    gradient.addColorStop(0.25,'#ffff00');
    gradient.addColorStop(0,'#ffffff');


    // load the sound
    setupAudioNodes();
    loadSound("http://eu2.radioboss.fm:8188/20ftRadio");


    function setupAudioNodes() {

        // setup a javascript node
        javascriptNode = context.createScriptProcessor(2048, 1, 1);
        // connect to destination, else it isn't called
        javascriptNode.connect(context.destination);


        // setup a analyzer
        analyser = context.createAnalyser();
        analyser.smoothingTimeConstant = 0.3;
        analyser.fftSize = 512;

        // create a buffer source node
        sourceNode = context.createBufferSource();
        sourceNode.connect(analyser);
        analyser.connect(javascriptNode);

        sourceNode.connect(context.destination);
    }

    // load the specified sound
    function loadSound(url) {
        var request = new XMLHttpRequest();
        request.open('GET', url, true);
        request.responseType = 'arraybuffer';

        // When loaded decode the data
        request.onload = function() {

            // decode the data
            context.decodeAudioData(request.response, function(buffer) {
                // when the audio is decoded play the sound
                playSound(buffer);
            }, onError);
        }
        request.send();
    }


    function playSound(buffer) {
        sourceNode.buffer = buffer;
        sourceNode.start(0);
    }

    // log if an error occurs
    function onError(e) {
        console.log(e);
    }

    // when the javascript node is called
    // we use information from the analyzer node
    // to draw the volume
    javascriptNode.onaudioprocess = function() {

        // get the average for the first channel
        var array =  new Uint8Array(analyser.frequencyBinCount);
        analyser.getByteFrequencyData(array);

        // clear the current state
        ctx.clearRect(0, 0, 1000, 325);

        // set the fill style
        ctx.fillStyle=gradient;
        drawSpectrum(array);

    }


    function drawSpectrum(array) {
        for ( var i = 0; i < (array.length); i++ ){
            var value = array[i];

            ctx.fillRect(i*5,325-value,3,325);
            //  console.log([i,value])
        }
    };

</script>
</body>
</html>
